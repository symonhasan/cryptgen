{"version":3,"sources":["Functions/ConvertFunctions.js","Functions/InterpretFunctions.js","Data/data.js","Components/Header.js","Components/Selection.js","Components/TextArea.js","App.js","serviceWorker.js","index.js"],"names":["toFlippedStr","str","outputStr","i","length","convertBaseTo","number","base","res","ld","Math","floor","String","fromCharCode","exports","setConvertText","mode","charCodeAt","toDecimal","toBinary","toOctal","toHexa","setOriginalText","flippedStrToText","temp","decimalToText","ch","parseInt","binaryToText","octalToText","hexaDecimalToText","selectionList","name","sample","Title","props","siteTitle","Description","className","children","Header","href","Selection","class","onClick","click","title","SelectionArea","leftmode","leftclick","rightmode","rightclick","TextBox","rows","onChange","func","value","len","SelectArea","list","map","select","index","key","selectfunc","TextArea","interpretedText","interpretedTextLen","onChangeHandlerFunc","renderLeftSide","convertedText","convertedTextLen","e","stopPropagation","renderRightSide","App","state","currentInterpretAs","currentConvertTo","interpretAsClicked","convertToClicked","originalText","showSelectOptionLeft","event","setState","showSelectOptionRight","updateInterpretedText","target","currentOriginalText","convertedOutput","selectionClicked","newInterpret","getAttribute","newOriginalText","newConvertedTo","newConvert","currentInterpretedText","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d9104217.chunk.js","sourcesContent":["const toFlippedStr = (str) => {\r\n    let outputStr = \"\";\r\n    for (let i = str.length - 1; i >= 0; i--) {\r\n        outputStr += str[i];\r\n    }\r\n    return outputStr;\r\n};\r\n\r\nconst toDecimal = (str) => {\r\n    let outputStr = \"\";\r\n    for (let i = 0; i < str.length; i++) {\r\n        outputStr += str.charCodeAt(i) + \" \";\r\n    }\r\n    return outputStr;\r\n};\r\n\r\nconst convertBaseTo = (number, base) => {\r\n    let res = \"\";\r\n    while (number !== 0) {\r\n        let ld = Math.floor(number % base);\r\n        if( ld > 9 ){\r\n            ld = String.fromCharCode( ld + 55 );\r\n        }\r\n        res += ld;\r\n        number = Math.floor(number / base);\r\n    }\r\n    res = toFlippedStr(res);\r\n    return res;\r\n};\r\n\r\nconst toBinary = (str) => {\r\n    let outputStr = \"\";\r\n    for (let i = 0; i < str.length; i++) {\r\n        outputStr += convertBaseTo(str.charCodeAt(i), 2);\r\n        outputStr += \" \";\r\n    }\r\n    return outputStr;\r\n};\r\n\r\nconst toOctal = (str) => {\r\n    let outputStr = \"\";\r\n    for (let i = 0; i < str.length; i++) {\r\n        outputStr += convertBaseTo(str.charCodeAt(i), 8);\r\n        outputStr += \" \";\r\n    }\r\n    return outputStr;\r\n};\r\n\r\nconst toHexa = (str) => {\r\n    let outputStr = \"\";\r\n    for (let i = 0; i < str.length; i++) {\r\n        outputStr += convertBaseTo(str.charCodeAt(i), 16);\r\n        outputStr += \" \";\r\n    }\r\n    return outputStr;\r\n};\r\n\r\nexports.setConvertText = (str, mode) => {\r\n    switch (mode) {\r\n        case \"Flipped\":\r\n            return toFlippedStr(str);\r\n        case \"Decimal\":\r\n            return toDecimal(str);\r\n        case \"Binary\":\r\n            return toBinary(str);\r\n        case \"Octal\":\r\n            return toOctal(str);\r\n        case \"Hexadecimal\":\r\n            return toHexa(str);\r\n        default:\r\n            return str;\r\n    }\r\n};\r\n","const flippedStrToText = (str) => {\r\n    let outputStr = \"\";\r\n    for (let i = str.length - 1; i >= 0; i--) {\r\n        outputStr += str[i];\r\n    }\r\n    return outputStr;\r\n};\r\n\r\nconst decimalToText = ( str ) => {\r\n    let outputStr = \"\";\r\n    let temp = \"\";\r\n    for(let i = 0; i < str.length; i++ ){\r\n        if( str[ i ] === ' ' ){\r\n            outputStr += String.fromCharCode( temp );\r\n            temp = \"\";\r\n        } else{\r\n            temp += str[ i ];\r\n        }\r\n    }\r\n    if( temp !== \"\" )\r\n        outputStr += String.fromCharCode( temp );\r\n    return outputStr;\r\n}\r\n\r\nconst binaryToText = ( str ) => {\r\n\r\n    let outputStr = \"\";\r\n    let temp = \"\";\r\n    for( let i = 0 ; i < str.length; i++ ){\r\n        if( str[ i ] === ' ' )\r\n        {\r\n            const ch = parseInt( temp , 2 );\r\n            temp = \"\";\r\n            outputStr += String.fromCharCode( ch );\r\n        } else {\r\n            temp += str[ i ];\r\n        }\r\n    }\r\n    if( temp !== \"\" )\r\n        outputStr += String.fromCharCode( temp );\r\n    return outputStr;\r\n}\r\n\r\nconst octalToText = ( str ) => {\r\n\r\n    let outputStr = \"\";\r\n    let temp = \"\";\r\n    for( let i = 0 ; i < str.length; i++ ){\r\n        if( str[ i ] === ' ' )\r\n        {\r\n            const ch = parseInt( temp , 8);\r\n            temp = \"\";\r\n            outputStr += String.fromCharCode( ch );\r\n        } else {\r\n            temp += str[ i ];\r\n        }\r\n    }\r\n    if( temp !== \"\" )\r\n        outputStr += String.fromCharCode( temp );\r\n    return outputStr;\r\n}\r\n\r\nconst hexaDecimalToText = ( str ) => {\r\n\r\n    let outputStr = \"\";\r\n    let temp = \"\";\r\n    for( let i = 0 ; i < str.length; i++ ){\r\n        if( str[ i ] === ' ' )\r\n        {\r\n            const ch = parseInt( temp , 16 );\r\n            temp = \"\";\r\n            outputStr += String.fromCharCode( ch );\r\n        } else {\r\n            temp += str[ i ];\r\n        }\r\n    }\r\n    if( temp !== \"\" )\r\n        outputStr += String.fromCharCode( temp );\r\n    return outputStr;\r\n}\r\n\r\nexports.setOriginalText = ( str , mode ) => {\r\n\r\n    switch( mode ){\r\n        case 'Flipped':\r\n            return flippedStrToText( str );\r\n        case 'Decimal':\r\n            return decimalToText( str );\r\n        case 'Binary':\r\n            return binaryToText( str );\r\n        case 'Octal':\r\n            return octalToText( str );\r\n        case 'Hexadecimal':\r\n            return hexaDecimalToText( str );\r\n        default:\r\n            return str;\r\n    }\r\n}","exports.selectionList = [\r\n    {\r\n        name: \"Text\",\r\n        sample: \"The quick brown fox jumps over 13 lazy dogs.\",\r\n    },\r\n    {\r\n        name: \"Flipped\",\r\n        sample: \".sgod yzal 31 revo spmuj xof nworb kciuq ehT\",\r\n    },\r\n    {\r\n        name: \"Decimal\",\r\n        sample:\r\n            \"84 104 101 32 113 117 105 99 107 32 98 114 111 119 110 32 102 111 120 32 106 117 109 112 115 32 111 118 101 114 32 49 51 32 108 97 122 121 32 100 111 103 115 46\",\r\n    },\r\n    {\r\n        name: \"Binary\",\r\n        sample:\r\n            \"01010100 01101000 01100101 00100000 01110001 01110101 01101001 01100011 01101011 00100000 01100010 01110010 01101111 01110111 01101110 00100000 01100110 01101111 01111000 00100000 01101010 01110101 01101101 01110000 01110011 00100000 01101111 01110110 01100101 01110010 00100000 00110001 00110011 00100000 01101100 01100001 01111010 01111001 00100000 01100100 01101111 01100111 01110011 00101110\",\r\n    },\r\n    {\r\n        name: \"Octal\",\r\n        sample:\r\n            \"124 150 145 40 161 165 151 143 153 40 142 162 157 167 156 40 146 157 170 40 152 165 155 160 163 40 157 166 145 162 40 61 63 40 154 141 172 171 40 144 157 147 163 56\",\r\n    },\r\n    {\r\n        name: \"Hexadecimal\",\r\n        sample:\r\n            \"54 68 65 20 71 75 69 63 6b 20 62 72 6f 77 6e 20 66 6f 78 20 6a 75 6d 70 73 20 6f 76 65 72 20 31 33 20 6c 61 7a 79 20 64 6f 67 73 2e\",\r\n    },\r\n];","import React from 'react';\r\nimport './Header.css';\r\n\r\nconst Title = (props) => {\r\n    return(\r\n        <h1>{props.siteTitle}</h1>\r\n    )\r\n} \r\n\r\nexport const Description = (props) => {\r\n    return(\r\n        <div className=\"description\">\r\n            <p>{props.children}</p>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport const Header = (props) => {\r\n    return (\r\n        <div className=\"top-header\">\r\n            <Title siteTitle={props.siteTitle} />\r\n            <a href=\"https://github.com/symonhasan/cryptgen\">Github</a>\r\n        </div>\r\n    );\r\n}","import React from 'react';\r\nimport './Selection.css';\r\n\r\nconst Selection = (props) => {\r\n    return (\r\n        <div className={props.class} onClick={props.click} >\r\n            <p>{props.title}</p>\r\n            <h2>{props.mode}</h2>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport const SelectionArea = (props) => {\r\n    return (\r\n        <div className=\"selection-area\">\r\n            <Selection class={\"selection-left\"} title=\"Interpret As\" mode={props.leftmode} click={props.leftclick}/>\r\n            <Selection class=\"selection-right\" title=\"Convert To\" mode={props.rightmode} click={props.rightclick}/>\r\n        </div>\r\n    );\r\n}","import React from \"react\";\r\nimport \"./TextArea.css\";\r\n\r\nconst TextBox = (props) => {\r\n\treturn (\r\n\t\t<div className=\"\">\r\n\t\t\t<textarea\r\n\t\t\t\trows=\"12\"\r\n\t\t\t\tonChange={props.func}\r\n\t\t\t\tvalue={props.value}\r\n\t\t\t></textarea>\r\n\t\t\t<div className=\"bar\">\r\n\t\t\t\t<p>{props.len}</p>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n};\r\nconst SelectArea = (props) => {\r\n\treturn props.list.map((select, index) => {\r\n\t\treturn (\r\n\t\t\t<div key={index} value={select.name} className=\"selection\" onClick={props.selectfunc}>\r\n\t\t\t\t<p className=\"selection-name\" value={select.name}>{select.name}</p>\r\n\t\t\t\t<p className=\"selection-sample\" value={select.name}>{select.sample}</p>\r\n\t\t\t</div>\r\n\t\t);\r\n\t});\r\n};\r\n\r\nconst renderLeftSide = (props) => {\r\n\tif (props.leftmode)\r\n\t\treturn (\r\n\t\t\t<div className=\"selectlist-area\">\r\n\t\t\t\t<SelectArea list={props.list} selectfunc={props.selectfunc}></SelectArea>\r\n\t\t\t</div>\r\n\t\t);\r\n\telse\r\n\t\treturn (\r\n\t\t\t<TextBox\r\n\t\t\t\tvalue={props.interpretedText}\r\n\t\t\t\tlen={props.interpretedTextLen}\r\n\t\t\t\tfunc={props.onChangeHandlerFunc}\r\n\t\t\t/>\r\n\t\t);\r\n};\r\nconst renderRightSide = (props) => {\r\n\tif (props.rightmode)\r\n\t\treturn (\r\n\t\t\t<div className=\"selectlist-area\">\r\n\t\t\t\t<SelectArea list={props.list} selectfunc={props.selectfunc}></SelectArea>\r\n\t\t\t</div>\r\n\t\t);\r\n\telse {\r\n\t\treturn <TextBox value={props.convertedText} len={props.convertedTextLen} func={( e ) => { e.stopPropagation()}}/>; // warning\r\n\t}\r\n};\r\n\r\nconst TextArea = (props) => {\r\n\treturn (\r\n\t\t<div className=\"text-area\">\r\n\t\t\t{renderLeftSide(props)}\r\n\t\t\t{renderRightSide(props)}\r\n\t\t</div>\r\n\t);\r\n};\r\nexport default TextArea;\r\n","import React, { Component } from \"react\";\r\nimport \"./App.css\";\r\nimport { Header, Description } from \"./Components/Header\";\r\nimport { SelectionArea } from \"./Components/Selection\";\r\nimport TextArea from \"./Components/TextArea\";\r\nimport {setConvertText} from \"./Functions/ConvertFunctions\";\r\nimport {setOriginalText} from \"./Functions/InterpretFunctions\";\r\nimport {selectionList} from \"./Data/data\";\r\n\r\nclass App extends Component {\r\n\t\r\n\tstate = {\r\n\t\tcurrentInterpretAs: \"Text\",\r\n\t\tcurrentConvertTo: \"Flipped\",\r\n\t\tinterpretAsClicked: false,\r\n\t\tconvertToClicked: false,\r\n\t\tinterpretedText: \"The quick brown fox jumps over a lazy dogs.\",\r\n\t\toriginalText: \"The quick brown fox jumps over a lazy dogs.\",\r\n\t\tconvertedText: \"\",\r\n\t\tinterpretedTextLen: 0,\r\n\t\tconvertedTextLen: 0,\r\n\t};\r\n\t\r\n\tcomponentDidMount() {\r\n\r\n\t\tconst currentInterpretedText = this.state.interpretedText;\r\n\t\tconst currentConvertTo = this.state.currentConvertTo;\r\n\r\n\t\tconst convertedOutput = setConvertText( currentInterpretedText , currentConvertTo );\r\n\r\n\t\tthis.setState({\r\n\t\t\tinterpretedTextLen: currentInterpretedText.length,\r\n\t\t\tconvertedTextLen: convertedOutput.length,\r\n\t\t\tinterpretedText: currentInterpretedText,\r\n\t\t\tconvertedText: convertedOutput,\r\n\t\t});\r\n\t}\r\n\r\n\tshowSelectOptionLeft = (event) => {\r\n\t\tthis.setState({\r\n\t\t\tinterpretAsClicked: !this.state.interpretAsClicked,\r\n\t\t\tconvertToClicked: false,\r\n\t\t});\r\n\t};\r\n\r\n\tshowSelectOptionRight = (event) => {\r\n\t\tthis.setState({\r\n\t\t\tconvertToClicked: !this.state.convertToClicked,\r\n\t\t\tinterpretAsClicked: false,\r\n\t\t});\r\n\t};\r\n\r\n\tupdateInterpretedText = (event) => {\r\n\t\t\r\n\t\tthis.setState({\r\n\t\t\tinterpretedText: event.target.value,\r\n\t\t\tinterpretedTextLen: event.target.value.length,\r\n\t\t});\r\n\r\n\t\tconst currentInterpretAs = this.state.currentInterpretAs;\r\n\t\tconst currentOriginalText = setOriginalText( event.target.value , currentInterpretAs );\r\n\t\tconst currentConvertTo = this.state.currentConvertTo;\r\n\r\n\t\tconst convertedOutput = setConvertText( currentOriginalText , currentConvertTo );\r\n\t\tthis.setState({\r\n\t\t\tconvertedText: convertedOutput,\r\n\t\t\tconvertedTextLen: convertedOutput.length,\r\n\t\t\toriginalText: currentOriginalText\r\n\t\t})\r\n\t\t\r\n\t};\r\n\r\n\tselectionClicked = (event) => {\r\n\t\tif (this.state.interpretAsClicked) {\r\n\t\t\tconst newInterpret = event.target.getAttribute(\"value\");\r\n\t\t\tconst newOriginalText = setOriginalText( this.state.interpretedText , newInterpret );\r\n\r\n\t\t\tconst newConvertedTo = setConvertText( newOriginalText , this.state.currentConvertTo );\r\n\r\n\t\t\tthis.setState({\r\n\t\t\t\tcurrentInterpretAs: newInterpret,\r\n\t\t\t\tinterpretAsClicked: false,\r\n\t\t\t\toriginalText: newOriginalText,\r\n\t\t\t\tconvertedText: newConvertedTo,\r\n\t\t\t\tconvertedTextLen: newConvertedTo.length\r\n\t\t\t});\r\n\t\t} else if (this.state.convertToClicked) {\r\n\t\t\tconst newConvert = event.target.getAttribute(\"value\");\r\n\t\t\tconst currentOriginalText = this.state.originalText;\r\n\t\t\tconst convertedOutput = setConvertText( currentOriginalText , newConvert );\r\n\t\t\tthis.setState({\r\n\t\t\t\tcurrentConvertTo: newConvert,\r\n\t\t\t\tconvertToClicked: false,\r\n\t\t\t\tconvertedText: convertedOutput,\r\n\t\t\t\tconvertedTextLen: convertedOutput.length,\r\n\t\t\t});\r\n\t\t}\r\n\t};\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div className=\"App\">\r\n\t\t\t\t<Header siteTitle=\"CryptGen\" />\r\n\t\t\t\t<Description>\r\n\t\t\t\t\tThis project is license under the <strong>MIT</strong> and still under active development inspired from <a href=\"https://v2.cryptii.com\">Cryptii</a>. This site fully run into your browser therefore no contents won't sent to any kind of server. Here you can encode and decode your text between different format systems. Please note that the encryption methods offered here are very basic and therefore <strong>not considered as secure.</strong>\r\n\t\t\t\t</Description>\r\n\t\t\t\t<SelectionArea\r\n\t\t\t\t\tleftmode={this.state.currentInterpretAs}\r\n\t\t\t\t\trightmode={this.state.currentConvertTo}\r\n\t\t\t\t\tleftclick={this.showSelectOptionLeft}\r\n\t\t\t\t\trightclick={this.showSelectOptionRight}\r\n\t\t\t\t/>\r\n\t\t\t\t<TextArea\r\n\t\t\t\t\tinterpretedText={this.state.interpretedText}\r\n\t\t\t\t\tinterpretedTextLen={this.state.interpretedTextLen}\r\n\t\t\t\t\tconvertedText={this.state.convertedText}\r\n\t\t\t\t\tconvertedTextLen={this.state.convertedTextLen}\r\n\t\t\t\t\tonChangeHandlerFunc={this.updateInterpretedText}\r\n\t\t\t\t\tleftmode={this.state.interpretAsClicked}\r\n\t\t\t\t\trightmode={this.state.convertToClicked}\r\n\t\t\t\t\tlist={selectionList}\r\n\t\t\t\t\tselectfunc={this.selectionClicked}\r\n\t\t\t\t/>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <App /> ,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}